[gd_scene load_steps=16 format=2]

[ext_resource path="res://Assets/animated_bathtub.png" type="Texture" id=1]
[ext_resource path="res://Scripts/Bathtub.gd" type="Script" id=2]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

uniform bool isActive = true;

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	if (isActive) {
		vec2 uv = UV;
	
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}
		}
	
}"

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 3 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 0.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true
shader_param/isActive = true

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 1 )
region = Rect2( 0, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 1 )
region = Rect2( 64, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=29]
atlas = ExtResource( 1 )
region = Rect2( 128, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 1 )
region = Rect2( 192, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 1 )
region = Rect2( 256, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 1 )
region = Rect2( 320, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 1 )
region = Rect2( 384, 0, 64, 96 )

[sub_resource type="AtlasTexture" id=27]
atlas = ExtResource( 1 )
region = Rect2( 448, 0, 64, 96 )

[sub_resource type="SpriteFrames" id=15]
animations = [ {
"frames": [ SubResource( 1 ), SubResource( 2 ), SubResource( 29 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 27 ) ],
"loop": true,
"name": "fill",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=25]
extents = Vector2( 23, 24.5 )

[sub_resource type="RectangleShape2D" id=26]
extents = Vector2( 37, 40 )

[node name="Bathtub" type="StaticBody2D"]
script = ExtResource( 2 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
material = SubResource( 28 )
frames = SubResource( 15 )
animation = "fill"
speed_scale = 2.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, -0.5 )
shape = SubResource( 25 )

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( -1, 3 )
shape = SubResource( 26 )

[connection signal="animation_finished" from="AnimatedSprite" to="." method="_on_AnimatedSprite_animation_finished"]
[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="body_exited" from="Area2D" to="." method="_on_Area2D_body_exited"]
